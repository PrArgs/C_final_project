/* A file storing all the global variables used in the program. */

#ifndef GLOBALS_H /* Preventing multiple inclusions of the file. */
#define GLOBALS_H

#define WORD_SIZE 12 /* The size of a word in the memory. */
#define MAX_FILE_NAME_LENGTH 30 /* The maximum length of a file name. */
#define MAX_LINE_LENGTH 80 /* The maximum length of a line in the assembly file. */
#define MAX_LABEL_LENGTH 30 /* The maximum length of a label. */
#define MEMORY_SIZE 1023 /* The size of the memory. */

#define INITIAL_INSTRUCTION_COUNTER 100 /* The piont in memory where the code begins. */

/* Deffing bool type */
typedef enum booleans{ 
    FALSE=0,
    TRUE=1 
    } bool;

/*Deffing the types of the commands*/
typedef enum op_codes{
    MOV=0,
    CMP=1,
    ADD=2,
    SUB=3,
    NOT=4,
    CLR=5,
    LEA=6,
    INC=7,
    DEC=8,
    JMP=9,
    BNE=10,
    RED=11,
    PRN=12,
    JSR=13,
    RTS=14,
    STOP=15
    } op_code;

/*Deffing the types of the registers*/
typedef enum registers{
    R0=0,
    R1=1,
    R2=2,
    R3=3,
    R4=4,
    R5=5,
    R6=6,
    R7=7,
    NOT_REG = -1
    } _register;

/*Deffing the types of the addressing methods*/
typedef enum addressing_methods{
    IMMEDIATE=1,
    DIRECT=3,
    REGISTER = 5
    } addressing_method;

/*Deffing the incoding methods)*/
typedef enum incoding_methods{
    ABSOLUTE=0,
    EXTERNAL=1,
    RELOCATABLE=2
    } incoding_method;



/*
**************************************************
---------DEFINING THE 12 BIT WORDS TYPES----------
FOR COMMANDS 
|   11-9   |   8-5  |   4-2 |   1-0     |
|   DEST   |    OP  |   SRC |   A,R,E   |

FOR DATA
|   11-7   |    6-2      |   1-0     |
|   DEST   |    SRC     |   A,R,E   |
**************************************************
*/


/*Define data word*/
typedef struct data_word{
    unsigned int ARE:2;
    unsigned int data:10;
    } data_word;

/*Define register word*/
typedef struct register_word{
    unsigned int ARE:2;
    unsigned int dest_reg:5;
    unsigned int source_reg:5;
    } register_word;

/*Define immediate direct word*/
typedef struct immediate_direct_word{
    unsigned int ARE:2;
    unsigned int operand:10;
    } immediate_direct_word;

/*Define data word a word generated by an guidance command as 
as apoosed to a word generated by an instruction command*/
typedef struct guidance_word{
    unsigned int data:WORD_SIZE;
    } data_word;

/*Deffing an instruction word*/
typedef struct instrction_word{
    unsigned int ARE:2;
    unsigned int dest:3;
    unsigned int op_code:4;
    unsigned int source:3;
    unsigned int src_val:3;
    unsigned int dest_val:3;
    } instruction_word;

/*Deffing a word*/
typedef struct word{
    char *label;
    union word_type{
        data_word *data_word;
        register_word *register_word;
        immediate_direct_word *immediate_direct_word;
        instruction_word *instruction_word;
        } word_type;
    } word;

/*Deffing libe in the code*/
typedef struct assembly_lines{
    char *file_name;
    int line_number;
    char *content;
} line;



#endif 